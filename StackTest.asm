
// indexをDレジスタに入れる
@17
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@17
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 論理演算の結果に関しては、trueであれば、-1, falseならば0で表現する

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

//（演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

@$_1_zero
D;JEQ // 計算結果が0であれば@zero_labelにjump

@$_1_not_zero
D;JNE // 計算結果が0以外であれば@not_zero_labelにjump

// 計算結果が0だった時の処理
($_1_zero)
// スタックに-1(true)を積む
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_1_end
0;JMP

// (計算結果が0でない場合, falseを返したい)
// 計算結果が0じゃない場合の処理
($_1_not_zero)
// スタックに0(false)を積む
@SP
A = M
M = 0
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_1_end
0;JMP

// 処理おわりラベル
($_1_end)
// indexをDレジスタに入れる
@17
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@16
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 論理演算の結果に関しては、trueであれば、-1, falseならば0で表現する

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

//（演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

@$_2_zero
D;JEQ // 計算結果が0であれば@zero_labelにjump

@$_2_not_zero
D;JNE // 計算結果が0以外であれば@not_zero_labelにjump

// 計算結果が0だった時の処理
($_2_zero)
// スタックに-1(true)を積む
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_2_end
0;JMP

// (計算結果が0でない場合, falseを返したい)
// 計算結果が0じゃない場合の処理
($_2_not_zero)
// スタックに0(false)を積む
@SP
A = M
M = 0
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_2_end
0;JMP

// 処理おわりラベル
($_2_end)
// indexをDレジスタに入れる
@16
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@17
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 論理演算の結果に関しては、trueであれば、-1, falseならば0で表現する

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

//（演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

@$_3_zero
D;JEQ // 計算結果が0であれば@zero_labelにjump

@$_3_not_zero
D;JNE // 計算結果が0以外であれば@not_zero_labelにjump

// 計算結果が0だった時の処理
($_3_zero)
// スタックに-1(true)を積む
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_3_end
0;JMP

// (計算結果が0でない場合, falseを返したい)
// 計算結果が0じゃない場合の処理
($_3_not_zero)
// スタックに0(false)を積む
@SP
A = M
M = 0
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_3_end
0;JMP

// 処理おわりラベル
($_3_end)
// indexをDレジスタに入れる
@892
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@891
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 上から2番目の方が小さければtrue、それ以外はfalseを返す

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

// （演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// 場合分けをする
// Dレジスタの値が0よりも小さければsmaller_labelにjump
// それ以外であればnot_smaller_labelにjump
@$_4_smaller        
D;JLT
@$_4_not_smaller
D;JGE

($_4_smaller)
// trueをスタックにつむ
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_4_end
0;JMP

($_4_not_smaller)
// falseをスタックにつむ
@SP
A = M
M = 0
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_4_end
0;JMP

// 処理のおわり
($_4_end)
// indexをDレジスタに入れる
@891
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@892
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 上から2番目の方が小さければtrue、それ以外はfalseを返す

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

// （演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// 場合分けをする
// Dレジスタの値が0よりも小さければsmaller_labelにjump
// それ以外であればnot_smaller_labelにjump
@$_5_smaller        
D;JLT
@$_5_not_smaller
D;JGE

($_5_smaller)
// trueをスタックにつむ
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_5_end
0;JMP

($_5_not_smaller)
// falseをスタックにつむ
@SP
A = M
M = 0
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_5_end
0;JMP

// 処理のおわり
($_5_end)
// indexをDレジスタに入れる
@891
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@891
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 上から2番目の方が小さければtrue、それ以外はfalseを返す

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

// （演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// 場合分けをする
// Dレジスタの値が0よりも小さければsmaller_labelにjump
// それ以外であればnot_smaller_labelにjump
@$_6_smaller        
D;JLT
@$_6_not_smaller
D;JGE

($_6_smaller)
// trueをスタックにつむ
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_6_end
0;JMP

($_6_not_smaller)
// falseをスタックにつむ
@SP
A = M
M = 0
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_6_end
0;JMP

// 処理のおわり
($_6_end)
// indexをDレジスタに入れる
@32767
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@32766
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 上から2番目の方が大きければtrue、それ以外はfalseを返す

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0        

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

//（演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// 場合分けをする
// Dレジスタの値が0よりも大きければgreater_labelにjump
// それ以外であればnot_greater_labelにjump
@$_7_greater        
D;JGT
@$_7_not_greater
D;JLE

($_7_greater)
// trueをスタックにつむ
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_7_end
0;JMP

($_7_not_greater)
// falseをスタックにつむ
@SP
A = M
M = 0
//スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_7_end
0;JMP

// 処理のおわり
($_7_end)
// indexをDレジスタに入れる
@32766
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@32767
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 上から2番目の方が大きければtrue、それ以外はfalseを返す

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0        

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

//（演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// 場合分けをする
// Dレジスタの値が0よりも大きければgreater_labelにjump
// それ以外であればnot_greater_labelにjump
@$_8_greater        
D;JGT
@$_8_not_greater
D;JLE

($_8_greater)
// trueをスタックにつむ
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_8_end
0;JMP

($_8_not_greater)
// falseをスタックにつむ
@SP
A = M
M = 0
//スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_8_end
0;JMP

// 処理のおわり
($_8_end)
// indexをDレジスタに入れる
@32766
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@32766
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// 上から2番目の方が大きければtrue、それ以外はfalseを返す

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0        

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

//（演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// 場合分けをする
// Dレジスタの値が0よりも大きければgreater_labelにjump
// それ以外であればnot_greater_labelにjump
@$_9_greater        
D;JGT
@$_9_not_greater
D;JLE

($_9_greater)
// trueをスタックにつむ
@SP
A = M
M = -1
// スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_9_end
0;JMP

($_9_not_greater)
// falseをスタックにつむ
@SP
A = M
M = 0
//スタックポインタの値を１増やす
@SP
M = M + 1
// (処理おわり)にjump
@$_9_end
0;JMP

// 処理のおわり
($_9_end)
// indexをDレジスタに入れる
@57
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@31
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// indexをDレジスタに入れる
@53
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// スタックポインタの値を１減らす
@SP
M = M - 1
// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

// （演算前の）スタックの上から2番目の値 + スタックの一番上の値 (x + y)を計算してDレジスタに入れる
D = D + A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// スタックの一番上に計算結果を格納して、スタックポインタの値を１増やす
@SP
A = M
M = D
@SP
M = M + 1
// indexをDレジスタに入れる
@112
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// 現スタックの一番上（演算前からだと上から2番目）の値を取り出してAレジスタにいれる
A = M
A = M

//（演算前の）スタックの上から2番目の値 - スタックの一番上の値 (x - y)を計算してDレジスタに入れる
D = D - A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0        

// スタックの一番上に計算結果を格納して、スタックポインタの値を１増やす
@SP
A = M
M = D

@SP
M = M + 1
// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// 取り出した値の符号を反転する
D = -D

// スタックの一番上に計算結果を格納して、スタックポインタの値を１増やす
@SP
A = M
M = D
@SP
M = M + 1// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの上から2番目の値を取り出してAレジスタに入れる
A = M
A = M

//（演算前の）スタックの上から2番目の値 AND スタックの一番上の値 (x and y)を計算してDレジスタに入れる
D = D & A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// スタックの一番上に計算結果を格納して、スタックポインタの値を１増やす
@SP
A = M
M = D
@SP
M = M + 1
// indexをDレジスタに入れる
@82
D = A
// SPがさすメモリに対してindexの値を入れる
@SP
A = M
M = D
// SPをインクリメントする
@SP
M = M + 1
// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの上から2番目の値を取り出してAレジスタに入れる
A = M
A = M

//（演算前の）スタックの上から2番目の値 OR スタックの一番上の値 (x | y)を計算してDレジスタに入れる
D = D | A

// スタックの一番上の値をメモリから削除する(0を入れる)
@SP
A = M
M = 0

// スタックの一番上に計算結果を格納して、スタックポインタの値を１増やす
@SP
A = M
M = D
@SP
M = M + 1
// スタックポインタの値を１減らす
@SP
M = M - 1

// スタックの一番上の値を取り出してDレジスタに入れる
A = M
D = M

// スタックの一番上の値をメモリから削除する(0を入れる)
M = 0

// 取り出した値の各ビットを反転する
D = !D

// スタックの一番上に計算結果を格納して、スタックポインタの値を１増やす
@SP
A = M
M = D
@SP
M = M + 1// アセンブリファイルの終了を明示する
($_10_file_end)
@$_10_file_end
0;JMP
